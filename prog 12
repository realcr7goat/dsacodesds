#include <stdio.h>
#include <stdlib.h>

#define COUNT 10
static int count = 0;

struct BST {
    int data;
    struct BST *left;
    struct BST *right;
};

typedef struct BST NODE;

NODE* createtree(NODE *node, int data) {
    if (node == NULL) {
        NODE *temp = (NODE*)malloc(sizeof(NODE));
        temp->data = data;
        temp->left = temp->right = NULL;
        return temp;
    }

    if (data < node->data) {
        node->left = createtree(node->left, data);
    } else if (data > node->data) {
        node->right = createtree(node->right, data);
    }

    return node;
}

int countnodes(NODE *root) {
    if (root != NULL) {
        countnodes(root->left);
        count++;
        countnodes(root->right);
    }
    return count;
}

void mirror(NODE *node) {
    if (node == NULL)
        return;
    
    NODE *temp;
    mirror(node->left);
    mirror(node->right);
    temp = node->left;
    node->left = node->right;
    node->right = temp;
}

void print2DUtil(NODE *root, int space) {
    if (root == NULL)
        return;

    space += COUNT;
    print2DUtil(root->right, space);
    printf("\n");
    for (int i = COUNT; i < space; i++)
        printf(" ");
    printf("%d\n", root->data);
    print2DUtil(root->left, space);
}

void print2D(NODE *root) {
    print2DUtil(root, 0);
}

unsigned int getLeafCount(NODE *node) {
    if (node == NULL)
        return 0;
    if (node->left == NULL && node->right == NULL)
        return 1;
    else
        return getLeafCount(node->left) + getLeafCount(node->right);
}

int main() {
    int data, ch = 0, i, n;
    NODE *root = NULL;

    while (ch != 6) {
        printf("\n1. Insertion in Binary Search Tree");
        printf("\n2. Mirroring a Tree");
        printf("\n3. Display a Tree");
        printf("\n4. Count Total Number Of Nodes in the Tree");
        printf("\n5. Count Only Leaf Nodes");
        printf("\n6. Exit\n");
        printf("Enter your Choice: ");
        scanf("%d", &ch);

        switch (ch) {
            case 1:
                printf("Enter size of tree: ");
                scanf("%d", &n);
                printf("Enter the elements of tree:\n");
                for (i = 0; i < n; i++) {
                    scanf("%d", &data);
                    root = createtree(root, data);
                }
                break;
            case 2:
                mirror(root);
                printf("Mirroring of the Tree is Done\n");
                break;
            case 3:
                printf("Print a Tree:\n");
                print2D(root);
                break;
            case 4:
                count = 0;
                printf("Total number of nodes in the Tree is %d\n", countnodes(root));
                break;
            case 5:
                printf("Number of Leaf Nodes in the tree is %d\n", getLeafCount(root));
                break;
            case 6:
                exit(0);
            default:
                printf("Enter valid choice\n");
                break;
        }
    }
    return 0;
}
