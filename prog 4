// This program converts an infix expression to a postfix expression using a stack
// It takes the infix expression as input and prints the postfix expression as output
#include<stdio.h>
#include<string.h>
#include <stdlib.h>
#include<ctype.h>
int priority(char);
void main()
{
char q[30],p[30],stk[10];
int i=0,j=0,top=-1,l,k;
printf("Enter Infix expression");
fgets(q, 30, stdin); // use fgets instead of gets
q[strcspn(q, "\n")] = 0; // remove the trailing newline
stk[++top]='(';
strcat(q,")");
printf("\nElement \t Stack \t Postfix\n"); // fix the typo
while(top!=-1)
{
if(isalpha(q[i])||isdigit(q[i]))

p[j++]=q[i];
else
if(q[i]=='(')
stk[++top]='(';
else
if(q[i]=='+'||q[i]=='-'||q[i]=='*'||q[i]=='/'||q[i]=='%'||q[i]=='^')
{
while(priority(stk[top])>=priority(q[i]))
p[j++]=stk[top--];
stk[++top]=q[i];
}
else
if(q[i]==')')
{
while(stk[top]!='(')
p[j++]=stk[top--];
top--;
}
printf("\n");
printf("%c",q[i]);
printf("\t");
for(k=0;k<=top;k++)
printf("%c",stk[k]);
printf("\t");
for(l=0;l<=j;l++);
printf("%c",p[l]);
i++;
}
p[j]='\0';
printf("\n Postfix is =%s",p);

}
int priority(char ch)
{
switch(ch)
{
case '^':return 3;
case '*':
case '/':
case '%':return 2;
case '+':
case '-':return 1;
default:return 0;
}
}
