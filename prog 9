#include <stdio.h>
#include <stdlib.h>

struct node {
    int info;
    struct node* link;
};
struct node* start = NULL;

void createList() {
    if (start == NULL) {
        int n;
        printf("\nEnter the number of nodes: ");
        scanf("%d", &n);
        if (n != 0) {
            int data;
            struct node* newnode;
            struct node* temp;
            newnode = malloc(sizeof(struct node));
            start = newnode;
            temp = start;

            printf("\nEnter number to be inserted : ");
            scanf("%d", &data);
            start->info = data;

            for (int i = 2; i <= n; i++) {
                newnode = malloc(sizeof(struct node));
                temp->link = newnode;
                printf("\nEnter number to be inserted : ");
                scanf("%d", &data);
                newnode->info = data;
                temp = temp->link;
            }
            temp->link = NULL;
        }
        printf("\nThe list is created\n");
    } else {
        printf("\nThe list is already created\n");
    }
}

void traverse() {
    struct node* temp;

    if (start == NULL) {
        printf("\nList is empty\n");
    } else {
        temp = start;
        while (temp != NULL) {
            printf("Data = %d\n", temp->info);
            temp = temp->link;
        }
    }
}

void insertAtFront() {
    int data;
    struct node* temp;
    temp = malloc(sizeof(struct node));
    printf("\nEnter number to be inserted : ");
    scanf("%d", &data);
    temp->info = data;
    temp->link = start;
    start = temp;
}

void insertAtEnd() {
    int data;
    struct node *temp, *head;
    temp = malloc(sizeof(struct node));
    printf("\nEnter number to be inserted : ");
    scanf("%d", &data);
    temp->info = data;
    temp->link = NULL;
    head = start;
    if (head == NULL) {
        start = temp;
    } else {
        while (head->link != NULL) {
            head = head->link;
        }
        head->link = temp;
    }
}

void insertAtPosition() {
    struct node *temp, *newnode;
    int pos, data, i = 1;
    newnode = malloc(sizeof(struct node));
    printf("\nEnter position and data :");
    scanf("%d %d", &pos, &data);
    temp = start;
    newnode->info = data;
    newnode->link = NULL;
    if (pos == 1) {
        newnode->link = start;
        start = newnode;
    } else {
        while (i < pos - 1 && temp != NULL) {
            temp = temp->link;
            i++;
        }
        if (temp != NULL) {
            newnode->link = temp->link;
            temp->link = newnode;
        } else {
            printf("\nPosition out of bounds\n");
            free(newnode);
        }
    }
}

void deleteFirst() {
    struct node* temp;
    if (start == NULL) {
        printf("\nList is empty\n");
    } else {
        temp = start;
        start = start->link;
        free(temp);
    }
}

void deleteEnd() {
    struct node *temp, *prevnode;
    if (start == NULL) {
        printf("\nList is Empty\n");
    } else {
        temp = start;
        if (temp->link == NULL) {
            free(temp);
            start = NULL;
        } else {
            while (temp->link != NULL) {
                prevnode = temp;
                temp = temp->link;
            }
            free(temp);
            prevnode->link = NULL;
        }
    }
}

void deletePosition() {
    struct node *temp, *position;
    int i = 1, pos;

    if (start == NULL) {
        printf("\nList is empty\n");
    } else {
        printf("\nEnter position : ");
        scanf("%d", &pos);
        if (pos == 1) {
            deleteFirst();
        } else {
            temp = start;
            while (i < pos - 1 && temp != NULL) {
                temp = temp->link;
                i++;
            }
            if (temp != NULL && temp->link != NULL) {
                position = temp->link;
                temp->link = position->link;
                free(position);
            } else {
                printf("\nPosition out of bounds\n");
            }
        }
    }
}

int main() {
    createList();
    int choice;
    while (1) {
        printf("\n\t1 Display list\n");
        printf("\t2 For insertion at starting\n");
        printf("\t3 For insertion at end\n");
        printf("\t4 For insertion at any position\n");
        printf("\t5 For deletion of first element\n");
        printf("\t6 For deletion of last element\n");
        printf("\t7 For deletion of element at any position\n");
        printf("\t8 To exit\n");
        printf("\nEnter Choice :\n");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                traverse();
                break;
            case 2:
                insertAtFront();
                break;
            case 3:
                insertAtEnd();
                break;
            case 4:
                insertAtPosition();
                break;
            case 5:
                deleteFirst();
                break;
            case 6:
                deleteEnd();
                break;
            case 7:
                deletePosition();
                break;
            case 8:
                exit(0);
            default:
                printf("Incorrect Choice\n");
        }
    }
    return 0;
}
