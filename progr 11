#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *next;
};

struct node *head = NULL;

void beginsert();
void lastinsert();
void begin_delete();
void last_delete();
void display();

int main() {
    int choice = 0;
    while (choice != 6) {
        printf("\nMain Menu\n");
        printf("1. Insert at beginning\n");
        printf("2. Insert at last\n");
        printf("3. Delete from beginning\n");
        printf("4. Delete from last\n");
        printf("5. Show\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                beginsert();
                break;
            case 2:
                lastinsert();
                break;
            case 3:
                begin_delete();
                break;
            case 4:
                last_delete();
                break;
            case 5:
                display();
                break;
            case 6:
                exit(0);
                break;
            default:
                printf("Please enter a valid choice.\n");
        }
    }
    return 0;
}

void beginsert() {
    struct node *ptr, *temp;
    int item;
    ptr = (struct node *)malloc(sizeof(struct node));
    if (ptr == NULL) {
        printf("\nOVERFLOW\n");
        return;
    }
    printf("Enter the node data: ");
    scanf("%d", &item);
    ptr->data = item;
    if (head == NULL) {
        head = ptr;
        ptr->next = head;
    } else {
        temp = head;
        while (temp->next != head)
            temp = temp->next;
        ptr->next = head;
        temp->next = ptr;
        head = ptr;
    }
    printf("Node inserted\n");
}

void lastinsert() {
    struct node *ptr, *temp;
    int item;
    ptr = (struct node *)malloc(sizeof(struct node));
    if (ptr == NULL) {
        printf("\nOVERFLOW\n");
        return;
    }
    printf("Enter data: ");
    scanf("%d", &item);
    ptr->data = item;
    if (head == NULL) {
        head = ptr;
        ptr->next = head;
    } else {
        temp = head;
        while (temp->next != head)
            temp = temp->next;
        temp->next = ptr;
        ptr->next = head;
    }
    printf("Node inserted\n");
}

void begin_delete() {
    struct node *ptr;
    if (head == NULL) {
        printf("\nUNDERFLOW\n");
        return;
    } else if (head->next == head) {
        free(head);
        head = NULL;
        printf("Node deleted\n");
    } else {
        ptr = head;
        while (ptr->next != head)
            ptr = ptr->next;
        ptr->next = head->next;
        free(head);
        head = ptr->next;
        printf("Node deleted\n");
    }
}

void last_delete() {
    struct node *ptr, *preptr;
    if (head == NULL) {
        printf("\nUNDERFLOW\n");
        return;
    } else if (head->next == head) {
        free(head);
        head = NULL;
        printf("Node deleted\n");
    } else {
        ptr = head;
        while (ptr->next != head) {
            preptr = ptr;
            ptr = ptr->next;
        }
        preptr->next = ptr->next;
        free(ptr);
        printf("Node deleted\n");
    }
}

void display() {
    struct node *ptr;
    if (head == NULL) {
        printf("\nNothing to print\n");
        return;
    }
    printf("\nPrinting values...\n");
    ptr = head;
    do {
        printf("%d\n", ptr->data);
        ptr = ptr->next;
    } while (ptr != head);
}
